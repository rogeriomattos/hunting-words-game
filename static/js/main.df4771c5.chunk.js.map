{"version":3,"sources":["pages/Main/index.js","utils/words.js","utils/alphabet.js","utils/randomInt.js","utils/addWordsInMatrix.js","utils/generateLetterMatrix.js","pages/Easy/index.js","routes.js","App.js","index.js"],"names":["Main","className","to","words","map","word","getWords","alphabet","getRandomInt","min","max","Math","ceil","floor","random","positionsUsedBefore","addWordHorizontalInMatrix","matrix","wordIndex","console","log","getPositionInMatrix","columnLength","rowLength","wordLength","orientation","row","randomInt","column","getColumn","j","isPositionRepeated","position","length","index","toUpperCase","push","generateLetterMatrix","i","addWordsInMatrix","Easy","state","positionSelected","toScrambleTtheLetters","setState","cleanWords","w","getLetterSelectedSameWord","lettersSelected","filter","el","selected","verifyFindWord","wordsAux","isFinded","selectLetter","indexRow","indexColumn","joined","this","prevProps","prevState","alert","key","type","onClick","item","letter","Component","Routes","path","exact","component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAKe,SAASA,IACpB,OACI,yBAAKC,UAAU,kBACX,6CACA,wHAGA,4BACI,4BACI,kBAAC,IAAD,CAAMC,GAAI,SAAV,W,oCCLdC,G,MATY,CACd,SACA,YACA,WACA,cACA,aACA,gBAGoBC,KAAI,SAACC,GAAD,MAAW,CACnC,KAAQA,EACR,UAAY,OAGD,SAASC,IAAY,OAAOH,ECd3C,IA6BeI,EA7BE,CACb,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KCpBW,SAASC,EAAaC,EAAKC,GAGtC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,IAAQA,ECJrD,IAAIM,EAAsB,GAc1B,SAASC,EAA0BC,EAAQZ,EAAMa,GAC7CC,QAAQC,IAAI,6BAIZ,IALuD,MAiB3D,SAASC,EAAoBC,EAAcC,EAAWC,EAAYC,GAE9D,IAAIC,EAAMC,EAAU,EAAGJ,GAEnBK,EA2BR,SAASC,EAAUP,EAAcE,GAC7B,IAAII,EAASD,EAAU,EAAGL,GAEvBM,EAASJ,GAAcF,IACtBM,EAASC,EAAUP,EAAcE,IAErC,OAAOI,EAjCMC,CAAUP,EAAcE,GAErC,GAAkB,6BAAfC,EACC,IAAI,IAAIK,EAAIF,EAAQE,EAAIF,EAASJ,EAAYM,IACzC,GAAGC,EAAmBL,EAAII,GAAG,CACzB,IAAIE,EAAWX,EAAoBC,EAAcC,EAAWC,EAAYC,GACxEC,EAAMM,EAASN,IACfE,EAASI,EAASJ,OAClB,MAKZ,MAAM,CACFF,IAAKA,EACLE,OAAQA,GAlCUP,CAAoBJ,EAAO,GAAGgB,OAAQhB,EAAOgB,OAAQ5B,EAAK4B,OAAQ,6BAAjFL,EAFgD,EAEhDA,OAAQF,EAFwC,EAExCA,IAEXQ,EAAQ,EACJJ,EAAIF,EAAQE,EAAIF,EAASvB,EAAK4B,OAAQH,IAE1Cb,EAAOS,GAAKI,GAAK,CAAC,IAAMJ,EAAK,OAAUI,EAAG,UAAY,EAAO,OAAUzB,EAAK6B,GAAOC,cAAe,KAAQ9B,EAAM,UAAaa,GAE7HgB,IAEAnB,EAAoBqB,KAAK,CAACV,MAAIE,OAAOE,IAGzC,OAAOb,EA0BX,SAASc,EAAmBL,EAAKE,GAC7B,IAAI,IAAIM,KAASnB,EACb,GAAGA,EAAoBmB,GAAOR,KAAOA,GAAOX,EAAoBmB,GAAON,QAAUA,EAC7E,OAAO,EAEf,OAAO,ECpDI,SAASS,EAAqBT,EAAQF,EAAKvB,GAGtD,IAFA,IAAIc,EAAS,GAELqB,EAAI,EAAGA,EAAIZ,EAAKY,IAAI,CAGxB,IAFA,IAAIZ,EAAM,GAEFI,EAAI,EAAGA,EAAIF,EAAQE,IACvBJ,EAAIU,KAAK,CAAC,IAAME,EAAG,OAAUR,EAAG,UAAY,EAAOzB,KAAM,KAAMa,WAAY,EAAG,OAAUX,EAASC,EAAa,EAAG,OAErHS,EAAOmB,KAAKV,GAKhB,OAFAT,EDjBW,SAA0BA,EAAQd,GAI7C,IAAI,IAAI+B,KAFRnB,EAAsB,GAELZ,EACbc,EAASD,EAA0BC,EAAQd,EAAM+B,GAAO7B,KAAM6B,GAGlE,OAAOjB,ECSEsB,CAAiBtB,EAAQd,G,IChBjBqC,E,4MAEjBC,MAAO,CACHb,OAAQ,GACRF,IAAK,GACLT,OAAQ,GACRyB,iBAAkB,GAClBvC,MAAO,I,EAyBXwC,sBAAwB,WAAO,IAAD,EACF,EAAKF,MAArBf,EADkB,EAClBA,IAAKE,EADa,EACbA,OAEb,EAAKgB,SAAS,CACV3B,OAAQoB,EAAqBT,EAAQF,EAAKpB,OAE9C,EAAKuC,c,EAGTA,WAAa,WACT,IAAMC,EAAI,EAAKL,MAAMtC,MAAMC,KAAI,YAC3B,MAAO,CACH,KAFmC,EAAVC,KAGzB,UAAY,MAGpBc,QAAQC,IAAI0B,GACZ,EAAKF,SAAS,CACVzC,MAAO2C,K,EAIfC,0BAA4B,SAAC1C,GACzB,IAAI2C,EAAkB,GAOtB,OANA,EAAKP,MAAMxB,OACVgC,QAAO,SAACvB,GACFA,EAAIuB,QAAO,SAACC,GAAQ,OAAOA,EAAG7C,MAAQA,GAAQ6C,EAAGC,YAAYlB,OAAS,IACrEe,EAAkBtB,EAAIuB,QAAO,SAACC,GAAQ,OAAOA,EAAG7C,MAAQA,GAAQ6C,EAAGC,gBAGpEH,G,EAGXI,eAAiB,SAAC/C,GAEd,GAAGA,EAAK,CACJ,IAAI2C,EAAkB,EAAKD,0BAA0B1C,GACrD,GAAG2C,EAAgBf,QAAU5B,EAAK4B,OAAO,CACrC,IAAIoB,EAAW,EAAKZ,MAAMtC,MAE1BkD,EAASL,EAAgB,GAAG9B,WAAWoC,UAAW,EAElD,EAAKV,SAAS,CACVzC,MAAOkD,O,EAOvBE,aAAe,SAACC,EAAUC,GAAgB,IAC9BxC,EAAW,EAAKwB,MAAhBxB,OAEJyC,EAASzC,EAEbyC,EAAOF,GAAUC,GAAaN,UAAYlC,EAAOuC,GAAUC,GAAaN,SAExE,EAAKP,SAAS,CACV3B,OAAQyC,IAGZ,EAAKN,eAAeM,EAAOF,GAAUC,GAAapD,O,kEAlFlC,IAAD,EACSsD,KAAKlB,MAArBf,EADO,EACPA,IAAKE,EADE,EACFA,OAEb+B,KAAKf,SAAS,CACV3B,OAAQoB,EAAqBT,EAAQF,EAAKpB,KAC1CH,MAAOG,Q,yCAIIsD,EAAWC,GAAW,IAAD,EACZF,KAAKlB,MAArBf,EAD4B,EAC5BA,IAAKE,EADuB,EACvBA,OAEVF,GAAOmC,EAAUnC,KAAOE,GAAUiC,EAAUjC,QAC3C+B,KAAKf,SAAS,CACV3B,OAAQoB,EAAqBT,EAAQF,EAAKpB,OAG/CqD,KAAKlB,MAAMtC,MAAM8C,QAAO,SAACC,GAAM,OAAOA,EAAGI,YAAWrB,QAAU0B,KAAKlB,MAAMtC,MAAM8B,QAC9E6B,MAAM,qD,+BAqEL,IAAD,SACqDH,KAAKlB,MAAtDtC,EADJ,EACIA,MAAOc,EADX,EACWA,OADX,EACmBW,OADnB,EAC2BF,IAD3B,EACgCgB,iBAEpC,OACI,yBAAKzC,UAAU,kBACX,yBAAKA,UAAU,SACVE,EAAMC,KAAI,WAAmB8B,GAAnB,IAAE7B,EAAF,EAAEA,KAAMiD,EAAR,EAAQA,SAAR,OACP,0BAAMS,IAAK1D,EAAO6B,EAAOjC,UAAYqD,EAAU,SAAS,IAAKjD,OAIrE,4BAAQ2D,KAAK,SAASC,QAASN,KAAKhB,uBAApC,uBAEA,yBAAK1C,UAAU,cACVgB,EAAOb,KAAI,SAACsB,EAAK8B,GAAN,OACR,wBAAIO,IAAK,MAAQP,GACZ9B,EAAItB,KAAI,SAAC8D,EAAMT,GAAP,OACL,wBACIxD,UAAYiE,EAAKf,SAAW,WAAa,GACzCY,IAAK,SAAWN,EAChBQ,QAAS,WAAK,EAAKV,aAAaC,EAAUC,KAEzCS,EAAKC,qB,GAxHRC,aCFnB,SAASC,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,iBAAiBC,OAAK,EAACC,UAAWxE,IAC9C,kBAAC,IAAD,CAAOsE,KAAK,QAAQC,OAAK,EAACC,UAAWhC,MCCtCiC,MANf,WACE,OACE,kBAACJ,EAAD,OCJJK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.df4771c5.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './styles.css';\r\n\r\nexport default function Main () {\r\n    return(\r\n        <div className=\"main-container\">\r\n            <h1>Hunting Words</h1>\r\n            <p>\r\n                Bem-vindo ao Huntimg Words, selecione o nível de dificuldade para você se divertir.\r\n            </p>\r\n            <ul>\r\n                <li>\r\n                    <Link to={\"/easy\"}>\r\n                        Easy\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}","const wordsText = [\r\n    'Apneia',\r\n    'Dermatite',\r\n    'Flictema',\r\n    'Intravenoso',\r\n    'Taquipneia',\r\n    'Urticária',\r\n]\r\n\r\nconst words = wordsText.map((word) => ({\r\n    'word': word, \r\n    'isFinded': false\r\n}));\r\n\r\nexport default function getWords(){ return words;};\r\n","const alphabet = [\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'X',\r\n    'W',\r\n    'Y',\r\n    'Z'\r\n];\r\n\r\nexport default alphabet;","/**\r\n * \r\n * @param {number} min \r\n * @param {number} max \r\n * @returns a number random \r\n */\r\nexport default function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}","import randomInt from './randomInt';\r\n\r\n/**\r\n * \r\n */\r\nlet positionsUsedBefore = [];\r\n\r\nexport default function addWordsInMatrix(matrix, words){\r\n    \r\n    positionsUsedBefore = [];\r\n\r\n    for(let index in words){\r\n        matrix = addWordHorizontalInMatrix(matrix, words[index].word, index);\r\n    }    \r\n\r\n    return matrix;\r\n}\r\n\r\n\r\nfunction addWordHorizontalInMatrix(matrix, word, wordIndex){\r\n    console.log(\"addWordHorizontalInMatrix\");\r\n    const {column, row} = getPositionInMatrix(matrix[0].length, matrix.length, word.length, 'addWordHorizontalInMatrix');\r\n\r\n    let index = 0;\r\n    for(let j = column; j < column + word.length; j++){\r\n            \r\n        matrix[row][j] = {'row':row, 'column': j, 'selected': false, 'letter': word[index].toUpperCase(), 'word': word, 'wordIndex': wordIndex} ;\r\n        \r\n        index++;\r\n\r\n        positionsUsedBefore.push({row,column:j});\r\n    }\r\n\r\n    return matrix;\r\n}\r\n\r\nfunction getPositionInMatrix(columnLength, rowLength, wordLength, orientation){\r\n\r\n    let row = randomInt(0, rowLength);\r\n\r\n    let column = getColumn(columnLength, wordLength);\r\n\r\n    if(orientation == 'addWordHorizontalInMatrix'){\r\n        for(let j = column; j < column + wordLength; j++){\r\n            if(isPositionRepeated(row,j)){\r\n                let position = getPositionInMatrix(columnLength, rowLength, wordLength, orientation);\r\n                row = position.row;\r\n                column = position.column;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return{\r\n        row: row,\r\n        column: column\r\n    };\r\n}\r\n\r\nfunction isPositionRepeated(row, column){\r\n    for(let index in positionsUsedBefore){\r\n        if(positionsUsedBefore[index].row == row && positionsUsedBefore[index].column == column)\r\n            return true\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getColumn(columnLength, wordLength){\r\n    let column = randomInt(0, columnLength);\r\n    \r\n    if(column + wordLength >= columnLength)\r\n        column = getColumn(columnLength, wordLength);\r\n    \r\n    return column;\r\n\r\n}","import alphabet from './alphabet';\r\nimport getRandomInt from './randomInt';\r\nimport addWordsInMatrix from './addWordsInMatrix';\r\n\r\n/**\r\n * \r\n * @param {number} column \r\n * @param {number} row \r\n * @param {Array<string>} words\r\n * @returns a string matrix[i][j] \r\n */\r\n\r\nexport default function generateLetterMatrix(column, row, words){\r\n    let matrix = [];\r\n    \r\n    for(let i = 0; i < row; i++){\r\n        let row = [];\r\n\r\n        for(let j = 0; j < column; j++)\r\n            row.push({'row':i, 'column': j, 'selected': false, word: null, wordIndex: -1, 'letter': alphabet[getRandomInt(0, 25)]});\r\n\r\n        matrix.push(row);\r\n    }\r\n    \r\n    matrix = addWordsInMatrix(matrix, words);\r\n\r\n    return matrix;\r\n}","import React, { Component } from 'react';\r\n\r\nimport './styles.css';\r\n\r\nimport getWords from '../../utils/words';\r\n\r\nimport generateLetterMatrix from '../../utils/generateLetterMatrix'\r\n\r\nexport default class Easy extends Component{\r\n    \r\n    state ={\r\n        column: 30,\r\n        row: 10,\r\n        matrix: [],\r\n        positionSelected: [],\r\n        words: []\r\n    };\r\n\r\n\r\n    componentDidMount(){\r\n        const { row, column } = this.state;\r\n\r\n        this.setState({\r\n            matrix: generateLetterMatrix(column, row, getWords()),\r\n            words: getWords()\r\n        });    \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        const { row, column } = this.state;\r\n\r\n        if(row != prevState.row || column != prevState.column)\r\n            this.setState({\r\n                matrix: generateLetterMatrix(column, row, getWords()),\r\n            }); \r\n\r\n        if(this.state.words.filter((el)=>{return el.isFinded}).length == this.state.words.length)\r\n            alert(\"Parabéns você encontrou todas as palavras\");\r\n    }\r\n\r\n    toScrambleTtheLetters = () => {\r\n        const { row, column } = this.state;\r\n        \r\n        this.setState({\r\n            matrix: generateLetterMatrix(column, row, getWords()),\r\n        });\r\n        this.cleanWords();\r\n    }\r\n\r\n    cleanWords = () =>{\r\n        const w = this.state.words.map(({word}) => {\r\n            return {\r\n                'word': word, \r\n                'isFinded': false\r\n            };\r\n        });\r\n        console.log(w);\r\n        this.setState({\r\n            words: w\r\n        });\r\n    }\r\n\r\n    getLetterSelectedSameWord = (word) =>{\r\n        let lettersSelected = [];\r\n        this.state.matrix\r\n        .filter((row) =>{\r\n            if(row.filter((el)=> { return el.word == word && el.selected;}).length > 0)\r\n                lettersSelected = row.filter((el)=> { return el.word == word && el.selected;});\r\n        }); \r\n\r\n        return lettersSelected;\r\n    }\r\n\r\n    verifyFindWord = (word) =>{\r\n        \r\n        if(word){\r\n            let lettersSelected = this.getLetterSelectedSameWord(word)\r\n            if(lettersSelected.length == word.length){\r\n                let wordsAux = this.state.words;\r\n                \r\n                wordsAux[lettersSelected[0].wordIndex].isFinded = true;\r\n\r\n                this.setState({\r\n                    words: wordsAux\r\n                });\r\n            }\r\n        }\r\n           \r\n    }\r\n\r\n    selectLetter = (indexRow, indexColumn) =>{\r\n        const { matrix } = this.state;\r\n\r\n        var joined = matrix;\r\n        \r\n        joined[indexRow][indexColumn].selected = !matrix[indexRow][indexColumn].selected;\r\n\r\n        this.setState({\r\n            matrix: joined\r\n        });\r\n\r\n        this.verifyFindWord(joined[indexRow][indexColumn].word);\r\n    } \r\n\r\n    \r\n\r\n    render(){\r\n        const { words, matrix, column, row, positionSelected } = this.state;\r\n        \r\n        return(\r\n            <div className=\"easy-container\">\r\n                <div className=\"words\">\r\n                    {words.map(({word, isFinded}, index)=> (\r\n                        <span key={word + index} className={(isFinded)?\"finded\":\"\"}>{word}</span>    \r\n                    ))}\r\n                </div>\r\n            \r\n                <button type=\"button\" onClick={this.toScrambleTtheLetters}>Embaralhar palavras</button>\r\n            \r\n                <div className=\"word-board\">\r\n                    {matrix.map((row, indexRow) => (\r\n                        <ul key={'row' + indexRow}>\r\n                            {row.map((item, indexColumn) => (\r\n                                <li \r\n                                    className={(item.selected)? \"selected\" : \"\"}\r\n                                    key={'column' + indexColumn} \r\n                                    onClick={()=>{this.selectLetter(indexRow, indexColumn)}} \r\n                                >\r\n                                    {item.letter}\r\n                                </li>\r\n                            ))}\r\n                        </ul>    \r\n                    ))}\r\n                </div>\r\n               \r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Main from './pages/Main';\r\nimport Easy from './pages/Easy';\r\n\r\nexport default function Routes(){\r\n    return(\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/hunting-words\" exact component={Main} />\r\n                <Route path=\"/easy\" exact component={Easy} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}","import React from 'react';\r\nimport './global.css';\r\n\r\nimport Routes from './routes';\r\n\r\nimport Main from './pages/Main';\r\nfunction App() {\r\n  return (\r\n    <Routes/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}